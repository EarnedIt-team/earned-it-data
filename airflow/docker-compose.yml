version: '3.8'
x-airflow-common: &airflow-common
  build: .
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: 'airflow'
    AIRFLOW__WEBSERVER__RBAC: 'true'
    AIRFLOW__CORE__HOSTNAME_CALLABLE: 'socket.getfqdn'
    DOCKER_HOST: unix:///var/run/docker.sock
    # 로그 관리 최적화 설정 (서버 용량 절약)
    AIRFLOW__LOGGING__LOGGING_LEVEL: WARNING
    AIRFLOW__LOGGING__LOG_RETENTION_DAYS: 3
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 30
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 300
    AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: 'false'
  volumes:
    - git-sync-dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock:rw
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  git-sync:
    image: alpine/git:latest
    environment:
      - GIT_SYNC_REPO=${GIT_SYNC_REPO:-https://github.com/username/repo.git}
      - GIT_SYNC_BRANCH=${GIT_SYNC_BRANCH:-main}
      - GIT_SYNC_WAIT=${GIT_SYNC_WAIT:-60}
      - GIT_SYNC_DEST=${GIT_SYNC_DEST:-/git}
      - GIT_SYNC_ROOT=${GIT_SYNC_ROOT:-/git}
      - GIT_SYNC_USERNAME=${GIT_SYNC_USERNAME:-}
      - GIT_SYNC_PASSWORD=${GIT_SYNC_PASSWORD:-}
    volumes:
      - git-sync-dags:/git
      - ./ssh:/root/.ssh:ro
    command: |
      sh -c "
        echo '📥 Git-Sync 시작 중...'
        
        # SSH 키 권한 설정
        if [ -f /root/.ssh/id_rsa ]; then
          chmod 600 /root/.ssh/id_rsa
          chmod 644 /root/.ssh/id_rsa.pub
          chmod 700 /root/.ssh
        fi
        
        # GitHub 호스트 키 추가
        ssh-keyscan github.com >> /root/.ssh/known_hosts 2>/dev/null || true
        
        # 초기 클론
        if [ ! -d \"$$GIT_SYNC_DEST/.git\" ]; then
          echo '🔄 저장소 초기 클론 중...'
          git clone -b $$GIT_SYNC_BRANCH $$GIT_SYNC_REPO $$GIT_SYNC_DEST
        fi
        
        cd $$GIT_SYNC_DEST
        
        # 주기적 동기화
        while true; do
          echo '🔄 GitHub에서 변경사항 확인 중...'
          
          # 원격 저장소에서 최신 변경사항 가져오기
          git fetch origin $$GIT_SYNC_BRANCH
          
          # 로컬과 원격 비교
          LOCAL_COMMIT=\$$(git rev-parse HEAD)
          REMOTE_COMMIT=\$$(git rev-parse origin/$$GIT_SYNC_BRANCH)
          
          if [ \"$$LOCAL_COMMIT\" != \"$$REMOTE_COMMIT\" ]; then
            echo '📝 새로운 변경사항 발견! 동기화 중...'
            git reset --hard origin/$$GIT_SYNC_BRANCH
            echo '✅ DAGs 동기화 완료'
            ls -la /git/
          else
            echo '✅ 변경사항 없음'
          fi
          
          echo \"💤 $$GIT_SYNC_WAIT초 대기 중...\"
          sleep $$GIT_SYNC_WAIT
        done
      "
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./:/sources
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-db-volume:
  git-sync-dags:
